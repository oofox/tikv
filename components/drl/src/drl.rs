// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `drl.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub field_type: EventType,
    pub key: ::std::string::String,
    pub quota: f32,
    pub duration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // .EventType type = 1;


    pub fn get_field_type(&self) -> EventType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = EventType::Pull;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EventType) {
        self.field_type = v;
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // float quota = 3;


    pub fn get_quota(&self) -> f32 {
        self.quota
    }
    pub fn clear_quota(&mut self) {
        self.quota = 0.;
    }

    // Param is passed by value, moved
    pub fn set_quota(&mut self, v: f32) {
        self.quota = v;
    }

    // .google.protobuf.Duration duration = 4;


    pub fn get_duration(&self) -> &::protobuf::well_known_types::Duration {
        self.duration.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
    pub fn clear_duration(&mut self) {
        self.duration.clear();
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_duration(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.duration.is_none() {
            self.duration.set_default();
        }
        self.duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_duration(&mut self) -> ::protobuf::well_known_types::Duration {
        self.duration.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        for v in &self.duration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.quota = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.duration)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != EventType::Pull {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if self.quota != 0. {
            my_size += 5;
        }
        if let Some(ref v) = self.duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != EventType::Pull {
            os.write_enum(1, self.field_type.value())?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if self.quota != 0. {
            os.write_float(3, self.quota)?;
        }
        if let Some(ref v) = self.duration.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventType>>(
                    "type",
                    |m: &Event| { &m.field_type },
                    |m: &mut Event| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Event| { &m.key },
                    |m: &mut Event| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "quota",
                    |m: &Event| { &m.quota },
                    |m: &mut Event| { &mut m.quota },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "duration",
                    |m: &Event| { &m.duration },
                    |m: &mut Event| { &mut m.duration },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Event>(
                    "Event",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Event {
        static mut instance: ::protobuf::lazy::Lazy<Event> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Event,
        };
        unsafe {
            instance.get(Event::new)
        }
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.field_type = EventType::Pull;
        self.key.clear();
        self.quota = 0.;
        self.duration.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    Pull = 0,
    Acquired = 1,
    Quota = 2,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::Pull),
            1 => ::std::option::Option::Some(EventType::Acquired),
            2 => ::std::option::Option::Some(EventType::Quota),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::Pull,
            EventType::Acquired,
            EventType::Quota,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EventType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::Pull
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tdrl.proto\x1a\x1egoogle/protobuf/duration.proto\"\x86\x01\n\x05Event\
    \x12\x1e\n\x04type\x18\x01\x20\x01(\x0e2\n.EventTypeR\x04type\x12\x10\n\
    \x03key\x18\x02\x20\x01(\tR\x03key\x12\x14\n\x05quota\x18\x03\x20\x01(\
    \x02R\x05quota\x125\n\x08duration\x18\x04\x20\x01(\x0b2\x19.google.proto\
    buf.DurationR\x08duration*.\n\tEventType\x12\x08\n\x04Pull\x10\0\x12\x0c\
    \n\x08Acquired\x10\x01\x12\t\n\x05Quota\x10\x022&\n\x03drl\x12\x1f\n\x07\
    connect\x12\x06.Event\x1a\x06.Event\"\0(\x010\x01B\x05Z\x03genJ\xa4\x04\
    \n\x06\x12\x04\0\0\x14\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x08\x12\x03\x01\0\x1a\n\t\n\x02\x08\x0b\x12\x03\x01\0\x1a\n\t\n\x02\x03\
    \0\x12\x03\x03\0(\n\n\n\x02\x05\0\x12\x04\x05\0\t\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x05\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x04\r\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x06\x04\x08\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x06\x0b\x0c\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\x04\x11\n\x0c\
    \n\x05\x05\0\x02\x01\x01\x12\x03\x07\x04\x0c\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03\x07\x0f\x10\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x08\x04\x0e\n\
    \x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x08\x04\t\n\x0c\n\x05\x05\0\x02\x02\
    \x02\x12\x03\x08\x0c\r\n\n\n\x02\x04\0\x12\x04\x0b\0\x10\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x0b\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x04\x17\
    \n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x04\r\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0c\x0e\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x15\x16\
    \n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x04\x13\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x0b\x0e\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r\x11\x12\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x0e\x04\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0e\x04\t\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0e\n\x0f\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\x0e\x12\x13\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0f\x04*\n\
    \x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x0f\x04\x1c\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x0f\x1d%\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0f()\n\
    \n\n\x02\x06\0\x12\x04\x12\0\x14\x01\n\n\n\x03\x06\0\x01\x12\x03\x12\x08\
    \x0b\n\x0b\n\x04\x06\0\x02\0\x12\x03\x13\x048\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\x13\x08\x0f\n\x0c\n\x05\x06\0\x02\0\x05\x12\x03\x13\x11\x17\
    \n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x13\x18\x1d\n\x0c\n\x05\x06\0\x02\0\
    \x06\x12\x03\x13(.\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x13/4b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
